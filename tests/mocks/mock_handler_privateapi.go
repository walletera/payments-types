// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	privateapi "github.com/walletera/payments-types/privateapi"
)

// Mockhandler_privateapi is an autogenerated mock type for the Handler type
type Mockhandler_privateapi struct {
	mock.Mock
}

type Mockhandler_privateapi_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockhandler_privateapi) EXPECT() *Mockhandler_privateapi_Expecter {
	return &Mockhandler_privateapi_Expecter{mock: &_m.Mock}
}

// GetPayment provides a mock function with given fields: ctx, params
func (_m *Mockhandler_privateapi) GetPayment(ctx context.Context, params privateapi.GetPaymentParams) (privateapi.GetPaymentRes, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetPayment")
	}

	var r0 privateapi.GetPaymentRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, privateapi.GetPaymentParams) (privateapi.GetPaymentRes, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, privateapi.GetPaymentParams) privateapi.GetPaymentRes); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(privateapi.GetPaymentRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, privateapi.GetPaymentParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockhandler_privateapi_GetPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPayment'
type Mockhandler_privateapi_GetPayment_Call struct {
	*mock.Call
}

// GetPayment is a helper method to define mock.On call
//   - ctx context.Context
//   - params privateapi.GetPaymentParams
func (_e *Mockhandler_privateapi_Expecter) GetPayment(ctx interface{}, params interface{}) *Mockhandler_privateapi_GetPayment_Call {
	return &Mockhandler_privateapi_GetPayment_Call{Call: _e.mock.On("GetPayment", ctx, params)}
}

func (_c *Mockhandler_privateapi_GetPayment_Call) Run(run func(ctx context.Context, params privateapi.GetPaymentParams)) *Mockhandler_privateapi_GetPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(privateapi.GetPaymentParams))
	})
	return _c
}

func (_c *Mockhandler_privateapi_GetPayment_Call) Return(_a0 privateapi.GetPaymentRes, _a1 error) *Mockhandler_privateapi_GetPayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockhandler_privateapi_GetPayment_Call) RunAndReturn(run func(context.Context, privateapi.GetPaymentParams) (privateapi.GetPaymentRes, error)) *Mockhandler_privateapi_GetPayment_Call {
	_c.Call.Return(run)
	return _c
}

// PatchPayment provides a mock function with given fields: ctx, req, params
func (_m *Mockhandler_privateapi) PatchPayment(ctx context.Context, req *privateapi.PaymentUpdate, params privateapi.PatchPaymentParams) (privateapi.PatchPaymentRes, error) {
	ret := _m.Called(ctx, req, params)

	if len(ret) == 0 {
		panic("no return value specified for PatchPayment")
	}

	var r0 privateapi.PatchPaymentRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privateapi.PaymentUpdate, privateapi.PatchPaymentParams) (privateapi.PatchPaymentRes, error)); ok {
		return rf(ctx, req, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privateapi.PaymentUpdate, privateapi.PatchPaymentParams) privateapi.PatchPaymentRes); ok {
		r0 = rf(ctx, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(privateapi.PatchPaymentRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privateapi.PaymentUpdate, privateapi.PatchPaymentParams) error); ok {
		r1 = rf(ctx, req, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockhandler_privateapi_PatchPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchPayment'
type Mockhandler_privateapi_PatchPayment_Call struct {
	*mock.Call
}

// PatchPayment is a helper method to define mock.On call
//   - ctx context.Context
//   - req *privateapi.PaymentUpdate
//   - params privateapi.PatchPaymentParams
func (_e *Mockhandler_privateapi_Expecter) PatchPayment(ctx interface{}, req interface{}, params interface{}) *Mockhandler_privateapi_PatchPayment_Call {
	return &Mockhandler_privateapi_PatchPayment_Call{Call: _e.mock.On("PatchPayment", ctx, req, params)}
}

func (_c *Mockhandler_privateapi_PatchPayment_Call) Run(run func(ctx context.Context, req *privateapi.PaymentUpdate, params privateapi.PatchPaymentParams)) *Mockhandler_privateapi_PatchPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*privateapi.PaymentUpdate), args[2].(privateapi.PatchPaymentParams))
	})
	return _c
}

func (_c *Mockhandler_privateapi_PatchPayment_Call) Return(_a0 privateapi.PatchPaymentRes, _a1 error) *Mockhandler_privateapi_PatchPayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockhandler_privateapi_PatchPayment_Call) RunAndReturn(run func(context.Context, *privateapi.PaymentUpdate, privateapi.PatchPaymentParams) (privateapi.PatchPaymentRes, error)) *Mockhandler_privateapi_PatchPayment_Call {
	_c.Call.Return(run)
	return _c
}

// PostPayment provides a mock function with given fields: ctx, req, params
func (_m *Mockhandler_privateapi) PostPayment(ctx context.Context, req *privateapi.PostPaymentReq, params privateapi.PostPaymentParams) (privateapi.PostPaymentRes, error) {
	ret := _m.Called(ctx, req, params)

	if len(ret) == 0 {
		panic("no return value specified for PostPayment")
	}

	var r0 privateapi.PostPaymentRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privateapi.PostPaymentReq, privateapi.PostPaymentParams) (privateapi.PostPaymentRes, error)); ok {
		return rf(ctx, req, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privateapi.PostPaymentReq, privateapi.PostPaymentParams) privateapi.PostPaymentRes); ok {
		r0 = rf(ctx, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(privateapi.PostPaymentRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privateapi.PostPaymentReq, privateapi.PostPaymentParams) error); ok {
		r1 = rf(ctx, req, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockhandler_privateapi_PostPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostPayment'
type Mockhandler_privateapi_PostPayment_Call struct {
	*mock.Call
}

// PostPayment is a helper method to define mock.On call
//   - ctx context.Context
//   - req *privateapi.PostPaymentReq
//   - params privateapi.PostPaymentParams
func (_e *Mockhandler_privateapi_Expecter) PostPayment(ctx interface{}, req interface{}, params interface{}) *Mockhandler_privateapi_PostPayment_Call {
	return &Mockhandler_privateapi_PostPayment_Call{Call: _e.mock.On("PostPayment", ctx, req, params)}
}

func (_c *Mockhandler_privateapi_PostPayment_Call) Run(run func(ctx context.Context, req *privateapi.PostPaymentReq, params privateapi.PostPaymentParams)) *Mockhandler_privateapi_PostPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*privateapi.PostPaymentReq), args[2].(privateapi.PostPaymentParams))
	})
	return _c
}

func (_c *Mockhandler_privateapi_PostPayment_Call) Return(_a0 privateapi.PostPaymentRes, _a1 error) *Mockhandler_privateapi_PostPayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockhandler_privateapi_PostPayment_Call) RunAndReturn(run func(context.Context, *privateapi.PostPaymentReq, privateapi.PostPaymentParams) (privateapi.PostPaymentRes, error)) *Mockhandler_privateapi_PostPayment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockhandler_privateapi creates a new instance of Mockhandler_privateapi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockhandler_privateapi(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockhandler_privateapi {
	mock := &Mockhandler_privateapi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
