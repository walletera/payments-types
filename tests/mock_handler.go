// Code generated by mockery v2.42.2. DO NOT EDIT.

package tests

import (
	context "context"

	api "github.com/walletera/payments-types/api"

	mock "github.com/stretchr/testify/mock"
)

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// GetPayment provides a mock function with given fields: ctx, params
func (_m *MockHandler) GetPayment(ctx context.Context, params api.GetPaymentParams) (api.GetPaymentRes, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetPayment")
	}

	var r0 api.GetPaymentRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, api.GetPaymentParams) (api.GetPaymentRes, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, api.GetPaymentParams) api.GetPaymentRes); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.GetPaymentRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, api.GetPaymentParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHandler_GetPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPayment'
type MockHandler_GetPayment_Call struct {
	*mock.Call
}

// GetPayment is a helper method to define mock.On call
//   - ctx context.Context
//   - params api.GetPaymentParams
func (_e *MockHandler_Expecter) GetPayment(ctx interface{}, params interface{}) *MockHandler_GetPayment_Call {
	return &MockHandler_GetPayment_Call{Call: _e.mock.On("GetPayment", ctx, params)}
}

func (_c *MockHandler_GetPayment_Call) Run(run func(ctx context.Context, params api.GetPaymentParams)) *MockHandler_GetPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(api.GetPaymentParams))
	})
	return _c
}

func (_c *MockHandler_GetPayment_Call) Return(_a0 api.GetPaymentRes, _a1 error) *MockHandler_GetPayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHandler_GetPayment_Call) RunAndReturn(run func(context.Context, api.GetPaymentParams) (api.GetPaymentRes, error)) *MockHandler_GetPayment_Call {
	_c.Call.Return(run)
	return _c
}

// PatchPayment provides a mock function with given fields: ctx, req, params
func (_m *MockHandler) PatchPayment(ctx context.Context, req *api.PaymentUpdate, params api.PatchPaymentParams) (api.PatchPaymentRes, error) {
	ret := _m.Called(ctx, req, params)

	if len(ret) == 0 {
		panic("no return value specified for PatchPayment")
	}

	var r0 api.PatchPaymentRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.PaymentUpdate, api.PatchPaymentParams) (api.PatchPaymentRes, error)); ok {
		return rf(ctx, req, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.PaymentUpdate, api.PatchPaymentParams) api.PatchPaymentRes); ok {
		r0 = rf(ctx, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.PatchPaymentRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.PaymentUpdate, api.PatchPaymentParams) error); ok {
		r1 = rf(ctx, req, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHandler_PatchPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchPayment'
type MockHandler_PatchPayment_Call struct {
	*mock.Call
}

// PatchPayment is a helper method to define mock.On call
//   - ctx context.Context
//   - req *api.PaymentUpdate
//   - params api.PatchPaymentParams
func (_e *MockHandler_Expecter) PatchPayment(ctx interface{}, req interface{}, params interface{}) *MockHandler_PatchPayment_Call {
	return &MockHandler_PatchPayment_Call{Call: _e.mock.On("PatchPayment", ctx, req, params)}
}

func (_c *MockHandler_PatchPayment_Call) Run(run func(ctx context.Context, req *api.PaymentUpdate, params api.PatchPaymentParams)) *MockHandler_PatchPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.PaymentUpdate), args[2].(api.PatchPaymentParams))
	})
	return _c
}

func (_c *MockHandler_PatchPayment_Call) Return(_a0 api.PatchPaymentRes, _a1 error) *MockHandler_PatchPayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHandler_PatchPayment_Call) RunAndReturn(run func(context.Context, *api.PaymentUpdate, api.PatchPaymentParams) (api.PatchPaymentRes, error)) *MockHandler_PatchPayment_Call {
	_c.Call.Return(run)
	return _c
}

// PostPayment provides a mock function with given fields: ctx, req, params
func (_m *MockHandler) PostPayment(ctx context.Context, req *api.Payment, params api.PostPaymentParams) (api.PostPaymentRes, error) {
	ret := _m.Called(ctx, req, params)

	if len(ret) == 0 {
		panic("no return value specified for PostPayment")
	}

	var r0 api.PostPaymentRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.Payment, api.PostPaymentParams) (api.PostPaymentRes, error)); ok {
		return rf(ctx, req, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.Payment, api.PostPaymentParams) api.PostPaymentRes); ok {
		r0 = rf(ctx, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.PostPaymentRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.Payment, api.PostPaymentParams) error); ok {
		r1 = rf(ctx, req, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHandler_PostPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostPayment'
type MockHandler_PostPayment_Call struct {
	*mock.Call
}

// PostPayment is a helper method to define mock.On call
//   - ctx context.Context
//   - req *api.Payment
//   - params api.PostPaymentParams
func (_e *MockHandler_Expecter) PostPayment(ctx interface{}, req interface{}, params interface{}) *MockHandler_PostPayment_Call {
	return &MockHandler_PostPayment_Call{Call: _e.mock.On("PostPayment", ctx, req, params)}
}

func (_c *MockHandler_PostPayment_Call) Run(run func(ctx context.Context, req *api.Payment, params api.PostPaymentParams)) *MockHandler_PostPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*api.Payment), args[2].(api.PostPaymentParams))
	})
	return _c
}

func (_c *MockHandler_PostPayment_Call) Return(_a0 api.PostPaymentRes, _a1 error) *MockHandler_PostPayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHandler_PostPayment_Call) RunAndReturn(run func(context.Context, *api.Payment, api.PostPaymentParams) (api.PostPaymentRes, error)) *MockHandler_PostPayment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
