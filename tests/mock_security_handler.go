// Code generated by mockery v2.42.2. DO NOT EDIT.

package tests

import (
	context "context"

	api "github.com/walletera/payments-types/api"

	mock "github.com/stretchr/testify/mock"
)

// MockSecurityHandler is an autogenerated mock type for the SecurityHandler type
type MockSecurityHandler struct {
	mock.Mock
}

type MockSecurityHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecurityHandler) EXPECT() *MockSecurityHandler_Expecter {
	return &MockSecurityHandler_Expecter{mock: &_m.Mock}
}

// HandleBearerAuth provides a mock function with given fields: ctx, operationName, t
func (_m *MockSecurityHandler) HandleBearerAuth(ctx context.Context, operationName string, t api.BearerAuth) (context.Context, error) {
	ret := _m.Called(ctx, operationName, t)

	if len(ret) == 0 {
		panic("no return value specified for HandleBearerAuth")
	}

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, api.BearerAuth) (context.Context, error)); ok {
		return rf(ctx, operationName, t)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, api.BearerAuth) context.Context); ok {
		r0 = rf(ctx, operationName, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, api.BearerAuth) error); ok {
		r1 = rf(ctx, operationName, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecurityHandler_HandleBearerAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleBearerAuth'
type MockSecurityHandler_HandleBearerAuth_Call struct {
	*mock.Call
}

// HandleBearerAuth is a helper method to define mock.On call
//   - ctx context.Context
//   - operationName string
//   - t api.BearerAuth
func (_e *MockSecurityHandler_Expecter) HandleBearerAuth(ctx interface{}, operationName interface{}, t interface{}) *MockSecurityHandler_HandleBearerAuth_Call {
	return &MockSecurityHandler_HandleBearerAuth_Call{Call: _e.mock.On("HandleBearerAuth", ctx, operationName, t)}
}

func (_c *MockSecurityHandler_HandleBearerAuth_Call) Run(run func(ctx context.Context, operationName string, t api.BearerAuth)) *MockSecurityHandler_HandleBearerAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(api.BearerAuth))
	})
	return _c
}

func (_c *MockSecurityHandler_HandleBearerAuth_Call) Return(_a0 context.Context, _a1 error) *MockSecurityHandler_HandleBearerAuth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecurityHandler_HandleBearerAuth_Call) RunAndReturn(run func(context.Context, string, api.BearerAuth) (context.Context, error)) *MockSecurityHandler_HandleBearerAuth_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecurityHandler creates a new instance of MockSecurityHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecurityHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecurityHandler {
	mock := &MockSecurityHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
