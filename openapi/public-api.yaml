openapi: "3.0.0"

info:
  title: "Payments Public API"
  description: "API to create, update and list payments"
  version: "1.0.0"

security:
  - bearerAuth: [ ]

paths:
  /payments/{paymentId}:
    get:
      description: "Retrieves an individual payment"
      operationId: "get-payment"
      parameters:
        - name: "paymentId"
          in: "path"
          description: "Payment Id"
          required: true
          schema:
            type: "string"
            format: "uuid"
      responses:
        "200":
          description: "Payment found"
          content:
            application/json:
              schema:
                $ref: "payment.yaml#/components/schemas/payment"
        "401":
          description: "Unauthorized"
        "404":
          description: "Payment not found"
        "500":
          description: "Internal error"

  /payments:
    get:
      summary: "List and filter payments"
      description: "Retrieves a list of payments. Supports filtering by multiple criteria."
      operationId: "list-payments"
      parameters:
        - name: id
          in: query
          description: "Filter by Payment Id (UUID)."
          required: false
          schema:
            type: string
            format: uuid
        - name: customerId
          in: query
          description: "Filter by customer ID (UUID)."
          required: false
          schema:
            type: string
            format: uuid
        - name: dateFrom
          in: query
          description: "Inclusive start date filter (ISO 8601)."
          required: false
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          description: "Inclusive end date filter (ISO 8601)."
          required: false
          schema:
            type: string
            format: date
        - name: status
          in: query
          description: "Filter by payment status."
          required: false
          schema:
            $ref: "payment.yaml#/components/schemas/paymentStatus"
        - name: gateway
          in: query
          description: "Filter by payment gateway."
          required: false
          schema:
            $ref: "payment.yaml#/components/schemas/gateway"
        - name: externalId
          in: query
          description: "Filter by external operation Id."
          required: false
          schema:
            type: string
        - name: schemeId
          in: query
          description: "Filter by scheme or clearing institution Id."
          required: false
          schema:
            type: string
        - name: amount
          in: query
          description: "Filter by payment amount"
          required: false
          schema:
            type: number
        - name: limit
          in: query
          description: "Number of payments to return (pagination)."
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 50
        - name: offset
          in: query
          description: "Offset for pagination."
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: "List of payments matching the given filters."
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "payment.yaml#/components/schemas/payment"
                  total:
                    type: integer
                    description: "Total number of matches"
        '400':
          description: "Invalid query parameters"
          content:
            application/json:
              schema:
                $ref: "api-error.yaml#/components/schemas/apiError"
        '401':
          description: "Unauthorized"
        '405':
          description: "Method Not Allowed"
        '500':
          description: "Internal error"
          content:
            application/json:
              schema:
                $ref: "api-error.yaml#/components/schemas/apiError"      
    post:
      summary: "Creates a payment"
      operationId: "post-payment"
      parameters:
        - name: "X-Walletera-Correlation-Id"
          in: "header"
          description: "a UUID that allows to trace end-to-end transactions"
          required: false
          schema:
            type: string
            format: "uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "payment.yaml#/components/schemas/paymentBasicAttributes"
                - type: object # empty object to force the generator not to use paymentBasicAttributes as the type name

      responses:
        "201":
          description: "Payment successfully created"
          content:
            application/json:
              schema:
                $ref: "payment.yaml#/components/schemas/payment"
        "400":
          description: "The provided parameters are incorrect"
          content:
            application/json:
              schema:
                $ref: "api-error.yaml#/components/schemas/apiError"
        "401":
          description: "Unauthorized"
        '405':
          description: "Method Not Allowed"
        "409":
          description: "The payment already exist"
          content:
            application/json:
              schema:
                $ref: "api-error.yaml#/components/schemas/apiError"
        "500":
          description: "Internal error"
          content:
            application/json:
              schema:
                $ref: "api-error.yaml#/components/schemas/apiError"

components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
