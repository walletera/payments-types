// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// GetPaymentParams is parameters of getPayment operation.
type GetPaymentParams struct {
	// Payment Id.
	PaymentId uuid.UUID
}

func unpackGetPaymentParams(packed middleware.Parameters) (params GetPaymentParams) {
	{
		key := middleware.ParameterKey{
			Name: "paymentId",
			In:   "path",
		}
		params.PaymentId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetPaymentParams(args [1]string, argsEscaped bool, r *http.Request) (params GetPaymentParams, _ error) {
	// Decode path: paymentId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "paymentId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.PaymentId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "paymentId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PatchPaymentParams is parameters of patchPayment operation.
type PatchPaymentParams struct {
	// A UUID that allows to trace end-to-end transactions.
	XWalleteraCorrelationID OptUUID
	// Payment Id.
	PaymentId uuid.UUID
}

func unpackPatchPaymentParams(packed middleware.Parameters) (params PatchPaymentParams) {
	{
		key := middleware.ParameterKey{
			Name: "X-Walletera-Correlation-Id",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.XWalleteraCorrelationID = v.(OptUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "paymentId",
			In:   "path",
		}
		params.PaymentId = packed[key].(uuid.UUID)
	}
	return params
}

func decodePatchPaymentParams(args [1]string, argsEscaped bool, r *http.Request) (params PatchPaymentParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: X-Walletera-Correlation-Id.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Walletera-Correlation-Id",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotXWalleteraCorrelationIDVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotXWalleteraCorrelationIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.XWalleteraCorrelationID.SetTo(paramsDotXWalleteraCorrelationIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Walletera-Correlation-Id",
			In:   "header",
			Err:  err,
		}
	}
	// Decode path: paymentId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "paymentId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.PaymentId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "paymentId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PostPaymentParams is parameters of postPayment operation.
type PostPaymentParams struct {
	// A UUID that allows to trace end-to-end transactions.
	XWalleteraCorrelationID OptUUID
}

func unpackPostPaymentParams(packed middleware.Parameters) (params PostPaymentParams) {
	{
		key := middleware.ParameterKey{
			Name: "X-Walletera-Correlation-Id",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.XWalleteraCorrelationID = v.(OptUUID)
		}
	}
	return params
}

func decodePostPaymentParams(args [0]string, argsEscaped bool, r *http.Request) (params PostPaymentParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: X-Walletera-Correlation-Id.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Walletera-Correlation-Id",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotXWalleteraCorrelationIDVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotXWalleteraCorrelationIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.XWalleteraCorrelationID.SetTo(paramsDotXWalleteraCorrelationIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Walletera-Correlation-Id",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}
