// Code generated by ogen, DO NOT EDIT.

package publicapi

import (
	"net/http"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// GetPaymentParams is parameters of get-payment operation.
type GetPaymentParams struct {
	// Payment Id.
	PaymentId uuid.UUID
}

func unpackGetPaymentParams(packed middleware.Parameters) (params GetPaymentParams) {
	{
		key := middleware.ParameterKey{
			Name: "paymentId",
			In:   "path",
		}
		params.PaymentId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetPaymentParams(args [1]string, argsEscaped bool, r *http.Request) (params GetPaymentParams, _ error) {
	// Decode path: paymentId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "paymentId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.PaymentId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "paymentId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListPaymentsParams is parameters of list-payments operation.
type ListPaymentsParams struct {
	// Filter by Payment Id (UUID).
	ID OptUUID
	// Filter by customer ID (UUID).
	CustomerId OptUUID
	// Inclusive start date filter (ISO 8601).
	DateFrom OptDate
	// Inclusive end date filter (ISO 8601).
	DateTo OptDate
	// Filter by payment status.
	Status OptPaymentStatus
	// Filter by payment gateway.
	Gateway OptGateway
	// Filter by external operation Id.
	ExternalId OptString
	// Filter by scheme or clearing institution Id.
	SchemeId OptString
	// Filter by payment amount.
	Amount OptFloat64
	// Number of payments to return (pagination).
	Limit OptInt
	// Offset for pagination.
	Offset OptInt
}

func unpackListPaymentsParams(packed middleware.Parameters) (params ListPaymentsParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ID = v.(OptUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "customerId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.CustomerId = v.(OptUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "dateFrom",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.DateFrom = v.(OptDate)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "dateTo",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.DateTo = v.(OptDate)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "status",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Status = v.(OptPaymentStatus)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "gateway",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Gateway = v.(OptGateway)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "externalId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ExternalId = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "schemeId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SchemeId = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "amount",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Amount = v.(OptFloat64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt)
		}
	}
	return params
}

func decodeListPaymentsParams(args [0]string, argsEscaped bool, r *http.Request) (params ListPaymentsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIDVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ID.SetTo(paramsDotIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: customerId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "customerId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCustomerIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotCustomerIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CustomerId.SetTo(paramsDotCustomerIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "customerId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: dateFrom.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "dateFrom",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDateFromVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDate(val)
					if err != nil {
						return err
					}

					paramsDotDateFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DateFrom.SetTo(paramsDotDateFromVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "dateFrom",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: dateTo.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "dateTo",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDateToVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDate(val)
					if err != nil {
						return err
					}

					paramsDotDateToVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DateTo.SetTo(paramsDotDateToVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "dateTo",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: status.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStatusVal PaymentStatus
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStatusVal = PaymentStatus(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Status.SetTo(paramsDotStatusVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Status.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "status",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: gateway.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "gateway",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotGatewayVal Gateway
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotGatewayVal = Gateway(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Gateway.SetTo(paramsDotGatewayVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Gateway.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "gateway",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: externalId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "externalId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotExternalIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotExternalIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ExternalId.SetTo(paramsDotExternalIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "externalId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: schemeId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "schemeId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSchemeIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSchemeIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SchemeId.SetTo(paramsDotSchemeIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "schemeId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: amount.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "amount",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAmountVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					paramsDotAmountVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Amount.SetTo(paramsDotAmountVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Amount.Get(); ok {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(value)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "amount",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := int(50)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           200,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: offset.
	{
		val := int(0)
		params.Offset.SetTo(val)
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Offset.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// PostPaymentParams is parameters of post-payment operation.
type PostPaymentParams struct {
	// A UUID that allows to trace end-to-end transactions.
	XWalleteraCorrelationID OptUUID
}

func unpackPostPaymentParams(packed middleware.Parameters) (params PostPaymentParams) {
	{
		key := middleware.ParameterKey{
			Name: "X-Walletera-Correlation-Id",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.XWalleteraCorrelationID = v.(OptUUID)
		}
	}
	return params
}

func decodePostPaymentParams(args [0]string, argsEscaped bool, r *http.Request) (params PostPaymentParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: X-Walletera-Correlation-Id.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Walletera-Correlation-Id",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotXWalleteraCorrelationIDVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotXWalleteraCorrelationIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.XWalleteraCorrelationID.SetTo(paramsDotXWalleteraCorrelationIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Walletera-Correlation-Id",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}
